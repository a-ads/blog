variables:
  PROD_BUCKET: 'a-ads-blog'
  STAGE_BUCKET: 'a-ads-staging-blog'
  AWS_DEFAULT_REGION: eu-central-1
  REGISTRY_HOST: 461602623056.dkr.ecr.eu-central-1.amazonaws.com
  DOCKER_DRIVER: overlay2
  SSH_PORT: 10115
  TMPDIR: /tmp

stages:
  - deploy
  - deploy_after_build

production_deploy:
  stage: deploy
  when: always
  retry: 1
  image: $REGISTRY_HOST/aads-ci-blog:production
  services:
    - $REGISTRY_HOST/aads-ci-blog:production
  before_script:
    - echo 'Starting deploy to production'
  only:
    - master
  script:
    # Update blog
    - cd /data
    - node_modules/.bin/gatsby build --prefix-paths
    - aws s3 cp ./public/ s3://$PROD_BUCKET/blog/ --recursive --acl public-read
    - aws s3 cp --content-type="text/vnd.yaml" --acl public-read --metadata-directive="REPLACE" s3://$PROD_BUCKET/blog/admin/config.yml s3://$PROD_BUCKET/blog/admin/config.yml


build_image_production:
  stage: deploy
  when: manual
  retry: 1
  image: ubuntu:22.04
  services:
    - docker:dind
  only:
    - master
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
    TMPDIR: ''
  before_script:
    - echo 'Starting build image'
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata awscli docker.io
  script:
    # build_image_commands
    - eval $(aws ecr get-login --no-include-email)
    - docker build --tag $REGISTRY_HOST/aads-ci-blog:production .
    - docker push $REGISTRY_HOST/aads-ci-blog:production


deploy_staging:
  stage: deploy
  when: manual
  retry: 1
  image: $REGISTRY_HOST/aads-ci-blog:staging
  services:
    - $REGISTRY_HOST/aads-ci-blog:staging
  only:
    - staging
  before_script:
    - echo 'Starting deploy to staging'
  script:
    # deploy_staging_commands
    - cd /data
    - node_modules/.bin/gatsby build --prefix-paths
    - aws s3 cp ./public/ s3://$STAGE_BUCKET/blog/ --recursive --acl public-read
    - aws s3 cp --content-type="text/vnd.yaml" --acl public-read --metadata-directive="REPLACE" s3://$STAGE_BUCKET/blog/admin/config.yml s3://$STAGE_BUCKET/blog/admin/config.yml

build_image_staging:
  stage: deploy
  when: manual
  retry: 1
  image: ubuntu:22.04
  services:
    - docker:dind
  only:
    - staging
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
    TMPDIR: ''
  before_script:
    - echo 'Starting build image'
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata awscli docker.io
  script:
    # build_image_commands
    - eval $(aws ecr get-login --no-include-email)
    - docker build --tag $REGISTRY_HOST/aads-ci-blog:staging .
    - docker push $REGISTRY_HOST/aads-ci-blog:staging


deploy_to_staging_after_the_build:
  stage: deploy_after_build
  when: on_success
  dependencies:
    - build_image_staging
  retry: 1
  image: $REGISTRY_HOST/aads-ci-blog:staging
  services:
    - $REGISTRY_HOST/aads-ci-blog:staging
  # only:
  #   - staging
  before_script:
    - echo 'Starting deploy to staging after the build'
  script:
    # deploy_staging_commands
    - cd /data
    - node_modules/.bin/gatsby build --prefix-paths
    - aws s3 cp ./public/ s3://$STAGE_BUCKET/blog/ --recursive --acl public-read
    - aws s3 cp --content-type="text/vnd.yaml" --acl public-read --metadata-directive="REPLACE" s3://$STAGE_BUCKET/blog/admin/config.yml s3://$STAGE_BUCKET/blog/admin/config.yml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $CI_PIPELINE_TRIGGERED == "build_image"'


    # # deploy_staging_commands
    # - cd /data
    # - node_modules/.bin/gatsby build --prefix-paths
    # - aws s3 cp ./public/ s3://$STAGE_BUCKET/blog/ --recursive --acl public-read
    # - aws s3 cp --content-type="text/vnd.yaml" --acl public-read --metadata-directive="REPLACE" s3://$STAGE_BUCKET/blog/admin/config.yml s3://$STAGE_BUCKET/blog/admin/config.yml


# .deploy_staging_commands: &deploy_staging_commands
#   - cd /data
#   - node_modules/.bin/gatsby build --prefix-paths
#   - aws s3 cp ./public/ s3://$STAGE_BUCKET/blog/ --recursive --acl public-read
#   - aws s3 cp --content-type="text/vnd.yaml" --acl public-read --metadata-directive="REPLACE" s3://$STAGE_BUCKET/blog/admin/config.yml s3://$STAGE_BUCKET/blog/admin/config.yml

# .build_image_commands: &build_image_commands
#   - eval $(aws ecr get-login --no-include-email)
#   - docker build --tag $REGISTRY_HOST/aads-ci-blog:latest .
#   - docker push $REGISTRY_HOST/aads-ci-blog:latest
