variables:
  PROD_BUCKET: 'a-ads-blog'
  STAGE_BUCKET: 'a-ads-staging-blog'
  AWS_DEFAULT_REGION: eu-central-1
  REGISTRY_HOST: 461602623056.dkr.ecr.eu-central-1.amazonaws.com
  DOCKER_DRIVER: overlay2
  SSH_PORT: 10115
  TMPDIR: /tmp

image: node:12-alpine


production_deploy:
  when: always
  retry: 1
  image: $REGISTRY_HOST/aads-ci-blog

  services:
    - $REGISTRY_HOST/aads-ci-blog

  stage: deploy

  before_script:
    - echo 'Starting deploy to production'

  only:
    - master

  script:
    # Update blog
    - cd /data
    - node_modules/.bin/gatsby build --prefix-paths
    - aws s3 cp ./public/ s3://$PROD_BUCKET/blog/ --recursive --acl public-read
    - aws s3 cp --content-type="text/vnd.yaml" --acl public-read --metadata-directive="REPLACE" s3://$PROD_BUCKET/blog/admin/config.yml s3://$PROD_BUCKET/blog/admin/config.yml

staging_deploy:
  when: manual
  retry: 1
  stage: deploy
  services:
    - $REGISTRY_HOST/aads-ci-blog
  before_script:
    - echo 'Starting deploy to staging'
  script:
    # Trigger the image build pipeline
    - curl --request POST --form "token=$CI_JOB_TOKEN" --form ref=staging https://gitlab0.int.a-ads.com/api/v4/projects/$CI_PROJECT_ID/trigger/pipeline
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH == "staging"'
      when: always
      allow_failure: true


build_image:
  stage: build
  image: ubuntu:22.04
  services:
    - docker:20-dind
  only:
    - triggers
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
    TMPDIR: ''
  before_script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata awscli docker.io
  script:
    - eval $(aws ecr get-login --no-include-email)
    - docker build --tag $REGISTRY_HOST/aads-ci-blog:latest .
    - docker push $REGISTRY_HOST/aads-ci-blog:latest
